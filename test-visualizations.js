/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
 * –ó–∞–ø—É—Å–∫: node test-visualizations.js
 */

import { createClient } from '@supabase/supabase-js';
import { getHeatmapData, getTreemapData } from './js/visualization-client.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
const SUPABASE_URL = process.env.SUPABASE_URL || 'your-supabase-url';
const SUPABASE_KEY = process.env.SUPABASE_ANON_KEY || 'your-supabase-key';

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API Heatmap
 */
async function testHeatmapAPI() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Heatmap API...');
    
    try {
        const response = await fetch(`http://localhost:3000/api/visualization-data?type=heatmap&month=12&year=2024&groupBy=day`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        console.log('‚úÖ Heatmap API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('üìä –î–∞–Ω–Ω—ã–µ:', {
            xAxis: data.xAxis?.length || 0,
            yAxis: data.yAxis?.length || 0,
            dataPoints: data.data?.length || 0,
            metadata: data.metadata
        });
        
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Heatmap API:', error.message);
        return null;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API Treemap
 */
async function testTreemapAPI() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Treemap API...');
    
    try {
        const response = await fetch(`http://localhost:3000/api/visualization-data?type=treemap&month=12&year=2024&hierarchyType=cluster`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        console.log('‚úÖ Treemap API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('üìä –î–∞–Ω–Ω—ã–µ:', {
            datasets: data.datasets?.length || 0,
            treeItems: data.datasets?.[0]?.tree?.length || 0,
            totalSpent: data.metadata?.totalSpent || 0,
            totalTransactions: data.metadata?.totalTransactions || 0
        });
        
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Treemap API:', error.message);
        return null;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function testDatabaseQueries() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const { data: transactions, error: txError } = await supabase
            .from('transactions')
            .select('*')
            .limit(5);
            
        if (txError) throw txError;
        
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions –¥–æ—Å—Ç—É–ø–Ω–∞');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        const { data: clusters, error: clusterError } = await supabase
            .from('transaction_clusters')
            .select('*')
            .limit(5);
            
        if (clusterError) throw clusterError;
        
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ transaction_clusters –¥–æ—Å—Ç—É–ø–Ω–∞');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${clusters.length}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
        const { data: txWithClusters, error: joinError } = await supabase
            .from('transactions')
            .select(`
                *,
                transaction_clusters(cluster_id)
            `)
            .gt('outcome', 0)
            .limit(5);
            
        if (joinError) throw joinError;
        
        console.log('‚úÖ JOIN –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏: ${txWithClusters.length}`);
        
        return { transactions, clusters, txWithClusters };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î:', error.message);
        return null;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
 */
async function createTestData() {
    console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        const { data: existing } = await supabase
            .from('transactions')
            .select('id')
            .limit(1);
            
        if (existing && existing.length > 0) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const testTransactions = [
            {
                date: '2024-12-01',
                category_name: '–ü—Ä–æ–¥—É–∫—Ç—ã',
                payee: '–ú–∞–≥–Ω–∏—Ç',
                outcome: 1500.50,
                income: 0,
                comment: '–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'
            },
            {
                date: '2024-12-02',
                category_name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
                payee: '–Ø–Ω–¥–µ–∫—Å.–¢–∞–∫—Å–∏',
                outcome: 300.00,
                income: 0,
                comment: '–ü–æ–µ–∑–¥–∫–∞ –Ω–∞ —Ç–∞–∫—Å–∏'
            },
            {
                date: '2024-12-03',
                category_name: '–ü—Ä–æ–¥—É–∫—Ç—ã',
                payee: '–ü—è—Ç—ë—Ä–æ—á–∫–∞',
                outcome: 800.25,
                income: 0,
                comment: '–ü—Ä–æ–¥—É–∫—Ç—ã'
            },
            {
                date: '2024-12-04',
                category_name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
                payee: '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
                outcome: 1200.00,
                income: 0,
                comment: '–ë–∏–ª–µ—Ç—ã –≤ –∫–∏–Ω–æ'
            },
            {
                date: '2024-12-05',
                category_name: '–ü—Ä–æ–¥—É–∫—Ç—ã',
                payee: '–ú–∞–≥–Ω–∏—Ç',
                outcome: 950.75,
                income: 0,
                comment: '–ü—Ä–æ–¥—É–∫—Ç—ã'
            }
        ];
        
        const { data: inserted, error } = await supabase
            .from('transactions')
            .insert(testTransactions)
            .select();
            
        if (error) throw error;
        
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');
        console.log(`üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${inserted.length}`);
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const clusterData = inserted.map((tx, index) => ({
            transaction_id: tx.id,
            cluster_id: Math.floor(index / 2) + 1 // –ü—Ä–æ—Å—Ç–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        }));
        
        const { error: clusterError } = await supabase
            .from('transaction_clusters')
            .insert(clusterData);
            
        if (clusterError) throw clusterError;
        
        console.log('‚úÖ –ö–ª–∞—Å—Ç–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...\n');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const dbResult = await testDatabaseQueries();
    
    if (!dbResult) {
        console.log('‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await createTestData();
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API (—Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)
    console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API (—Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ localhost:3000)...');
    
    const heatmapResult = await testHeatmapAPI();
    const treemapResult = await testTreemapAPI();
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // –ò—Ç–æ–≥–∏
    console.log('üìã –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbResult ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–æ—à–∏–±–∫–∞'}`);
    console.log(`‚úÖ Heatmap API: ${heatmapResult ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–æ—à–∏–±–∫–∞'}`);
    console.log(`‚úÖ Treemap API: ${treemapResult ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–æ—à–∏–±–∫–∞'}`);
    
    if (heatmapResult && treemapResult) {
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
    } else {
        console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error); 