/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
 */



// ============================================================================
// –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò (–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)
// ============================================================================

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Heatmap –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 * @param {number} month - –º–µ—Å—è—Ü (1-12)
 * @param {number} year - –≥–æ–¥
 * @param {string} groupBy - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: 'day' –∏–ª–∏ 'hour'
 * @returns {Promise<Object>} –¥–∞–Ω–Ω—ã–µ –¥–ª—è heatmap
 */
export async function getHeatmapData(month, year, groupBy = 'day') {
    try {
        const response = await fetch(`/api/unified?service=visualization&type=heatmap&month=${month}&year=${year}&groupBy=${groupBy}`);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching heatmap data:', error);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Treemap –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 * @param {number} month - –º–µ—Å—è—Ü (1-12)
 * @param {number} year - –≥–æ–¥
 * @param {string} hierarchyType - —Ç–∏–ø –∏–µ—Ä–∞—Ä—Ö–∏–∏: 'cluster' –∏–ª–∏ 'habit'
 * @returns {Promise<Object>} –¥–∞–Ω–Ω—ã–µ –¥–ª—è treemap
 */
export async function getTreemapData(month, year, hierarchyType = 'cluster') {
    try {
        const response = await fetch(`/api/unified?service=visualization&type=treemap&month=${month}&year=${year}&hierarchyType=${hierarchyType}`);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching treemap data:', error);
        throw error;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç Heatmap –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
 * @param {string} canvasId - ID canvas —ç–ª–µ–º–µ–Ω—Ç–∞
 * @param {Object} data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 * @param {Object} options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns {Chart} –æ–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞
 */
export function createHeatmap(canvasId, data, options = {}) {
    const ctx = document.getElementById(canvasId);
    if (!ctx) {
        console.error(`Canvas element with id '${canvasId}' not found`);
        return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
    if (!window.Chart || !window.Chart.registry.controllers.matrix) {
        console.error('Chart.js Matrix plugin not loaded');
        return null;
    }

    const chart = new Chart(ctx, {
        type: 'matrix',
        data: {
            datasets: data.datasets
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                title: {
                    display: true,
                    text: options.month || 'Heatmap —Ç—Ä–∞—Ç',
                    color: '#ffffff',
                    font: {
                        size: 16,
                        weight: 'bold'
                    }
                },
                legend: {
                    display: true,
                    position: 'right',
                    labels: {
                        color: '#ffffff',
                        usePointStyle: true
                    }
                },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            const dataset = context[0].dataset;
                            const dataPoint = context[0].raw;
                            return `${dataset.label} - ${dataPoint.x}${options.groupBy === 'hour' ? ':00' : ''}`;
                        },
                        label: function(context) {
                            const value = context.parsed.v;
                            return `–°—É–º–º–∞: ${value.toFixed(2)} ‚ÇΩ`;
                        }
                    }
                }
            },
            scales: {
                x: {
                    type: 'linear',
                    position: 'bottom',
                    ticks: {
                        color: '#ffffff',
                        callback: function(value) {
                            if (options.groupBy === 'hour') {
                                return `${value}:00`;
                            }
                            return value;
                        }
                    },
                    grid: {
                        color: '#374151'
                    }
                },
                y: {
                    type: 'linear',
                    ticks: {
                        color: '#ffffff',
                        callback: function(value) {
                            return data.labels.y[value] || '';
                        }
                    },
                    grid: {
                        color: '#374151'
                    }
                }
            }
        }
    });

    return chart;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç Treemap –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
 * @param {string} canvasId - ID canvas —ç–ª–µ–º–µ–Ω—Ç–∞
 * @param {Object} data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 * @param {Object} options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns {Chart} –æ–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞
 */
export function createTreemap(canvasId, data, options = {}) {
    const ctx = document.getElementById(canvasId);
    if (!ctx) {
        console.error(`Canvas element with id '${canvasId}' not found`);
        return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
    if (!window.Chart || !window.Chart.registry.controllers.treemap) {
        console.error('Chart.js Treemap plugin not loaded');
        return null;
    }

    const transformedData = transformDataForTreemapClient(data.data);

    const chart = new Chart(ctx, {
        type: 'treemap',
        data: {
            datasets: [{
                tree: transformedData,
                key: 'value',
                groups: ['children'],
                spacing: 1,
                backgroundColor: function(ctx) {
                    if (ctx.type !== 'data') return 'transparent';
                    return ctx.raw.color || '#6b7280';
                },
                labels: {
                    display: true,
                    formatter: function(ctx) {
                        const item = ctx.raw;
                        const percentage = item.percentage !== undefined ? 
                            ` (${item.percentage > 0 ? '+' : ''}${item.percentage.toFixed(1)}%)` : '';
                        return `${item.label}\n${item.value.toFixed(0)}‚ÇΩ${percentage}`;
                    },
                    color: '#ffffff',
                    font: {
                        size: 11
                    }
                }
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                title: {
                    display: true,
                    text: options.month || 'Treemap —Ç—Ä–∞—Ç',
                    color: '#ffffff',
                    font: {
                        size: 16,
                        weight: 'bold'
                    }
                },
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            return context[0].raw.label;
                        },
                        label: function(context) {
                            const item = context.raw;
                            const labels = [];
                            labels.push(`–°—É–º–º–∞: ${item.value.toFixed(2)} ‚ÇΩ`);
                            labels.push(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${item.count || 0}`);
                            
                            if (item.percentage !== undefined) {
                                const trendText = item.trend === 'up' ? 'üìà –†–æ—Å—Ç' : 
                                                 item.trend === 'down' ? 'üìâ –ü–∞–¥–µ–Ω–∏–µ' : 
                                                 item.trend === 'new' ? 'üÜï –ù–æ–≤–æ–µ' : '‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ';
                                labels.push(`${trendText}: ${item.percentage > 0 ? '+' : ''}${item.percentage.toFixed(1)}%`);
                            }
                            
                            return labels;
                        }
                    }
                }
            }
        }
    });

    return chart;
}

/**
 * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Treemap (–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)
 * @param {Array} data - –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {Array} —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
function transformDataForTreemapClient(data) {
    const result = [];
    
    data.forEach(category => {
        const categoryNode = {
            label: category.label,
            value: category.children.reduce((sum, child) => sum + child.value, 0),
            children: category.children
        };
        result.push(categoryNode);
    });
    
    return result;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è Heatmap –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
 * @param {number} value - –∑–Ω–∞—á–µ–Ω–∏–µ
 * @param {Array} allValues - –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
 * @returns {string} —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ rgba
 */
function getHeatmapColor(value, allValues) {
    const maxValue = Math.max(...allValues);
    const intensity = value / maxValue;
    return `rgba(59, 130, 246, ${intensity})`;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
 * @param {Chart} chart - –æ–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞
 * @param {Object} newData - –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @param {string} type - —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ('heatmap' –∏–ª–∏ 'treemap')
 */
export function updateVisualization(chart, newData, type) {
    if (!chart) return;
    
    if (type === 'heatmap') {
        chart.data.datasets = newData.datasets;
        chart.update();
    } else if (type === 'treemap') {
        const transformedData = transformDataForTreemapClient(newData.data);
        chart.data.datasets[0].tree = transformedData;
        chart.update();
    }
}

/**
 * –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
 * @param {Chart} chart - –æ–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞
 */
export function destroyVisualization(chart) {
    if (chart) {
        chart.destroy();
    }
}

 