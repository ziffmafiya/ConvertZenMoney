// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ API
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ index.html

async function checkEmbeddingDimensions() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
        const response = await fetch('/api/transaction-clustering?action=get&limit=5');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.clusters && result.clusters.length > 0) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª–∞—Å—Ç–µ—Ä—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const firstCluster = result.clusters[0];
            if (firstCluster.transactions && firstCluster.transactions.length > 0) {
                console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ:');
                console.log(`   - ID –∫–ª–∞—Å—Ç–µ—Ä–∞: ${firstCluster.clusterId}`);
                console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${firstCluster.transactionCount}`);
                console.log(`   - –û–±—â–∞—è —Å—É–º–º–∞: ${firstCluster.totalOutcome} –≥—Ä–Ω`);
                console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${firstCluster.categories.join(', ')}`);
            }
        } else {
            console.log('‚ö†Ô∏è –ö–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.');
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
        console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é...');
        
        const clusterResponse = await fetch('/api/transaction-clustering?action=cluster', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                eps: 0.3,
                minPts: 3,
                forceRecluster: false
            })
        });
        
        if (clusterResponse.ok) {
            const clusterResult = await clusterResponse.json();
            console.log('‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            console.log(`   - –°–æ–∑–¥–∞–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${clusterResult.clusters}`);
            console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${clusterResult.transactions}`);
            console.log(`   - –¢–æ—á–∫–∏ —à—É–º–∞: ${clusterResult.noise}`);
            console.log('üéâ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (768)');
        } else {
            const errorData = await clusterResponse.json();
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:', errorData.error);
            
            if (errorData.error.includes('Vectors must have the same length') || 
                errorData.error.includes('Embedding dimension mismatch')) {
                console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:');
                console.log('   1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç clear_embeddings.sql –≤ Supabase');
                console.log('   2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
                console.log('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é —Å–Ω–æ–≤–∞');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
        console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('   - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Supabase');
        console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function testSimilarTransactions() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    try {
        const response = await fetch('/api/transaction-clustering?action=find-similar', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                description: '–ø—Ä–æ–¥—É–∫—Ç—ã –µ–¥–∞ –ø–æ–∫—É–ø–∫–∏',
                limit: 5
            })
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            console.log(`   - –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${result.transactions.length}`);
            console.log(`   - –ó–∞–ø—Ä–æ—Å: "${result.query}"`);
        } else {
            const errorData = await response.json();
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:', errorData.error);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∏—Å–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...');
checkEmbeddingDimensions().then(() => {
    setTimeout(testSimilarTransactions, 1000);
});

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
console.log(`
üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:

1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12 ‚Üí Console)
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤–µ—Å—å —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
3. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏

üîß –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:
- –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç clear_embeddings.sql –≤ Supabase
- –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ
- –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
`); 