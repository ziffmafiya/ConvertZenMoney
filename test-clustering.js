/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * –ó–∞–ø—É—Å–∫: node test-clustering.js
 */

const BASE_URL = 'http://localhost:3000';

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function testClustering() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    try {
        const response = await fetch(`${BASE_URL}/api/transaction-clustering?action=cluster`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                eps: 0.3,
                minPts: 3,
                forceRecluster: false
            })
        });

        const data = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
            console.log(`   –ö–ª–∞—Å—Ç–µ—Ä–æ–≤: ${data.clusters}`);
            console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${data.transactions}`);
            console.log(`   –®—É–º: ${data.noise}`);
            return data;
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:', data.error);
            return null;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
        return null;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö
 */
async function testClusters() {
    console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤...');
    
    try {
        const response = await fetch(`${BASE_URL}/api/transaction-clustering?action=get&limit=10`);
        const data = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ');
            console.log(`   –í—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${data.summary.totalClusters}`);
            console.log(`   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${data.summary.totalTransactions}`);
            console.log(`   –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${data.summary.returnedClusters}`);
            return data;
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:', data.error);
            return null;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:', error.message);
        return null;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
async function testSimilarTransactions() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    try {
        const response = await fetch(`${BASE_URL}/api/transaction-clustering?action=find-similar`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                query: '–ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
                matchThreshold: 0.7,
                matchCount: 5,
                includeClusters: true
            })
        });

        const data = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É—Å–ø–µ—à–µ–Ω');
            console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${data.summary.totalTransactions}`);
            console.log(`   –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: ${data.summary.totalOutcome}`);
            console.log(`   –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${data.summary.totalIncome}`);
            return data;
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', data.error);
            return null;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
        return null;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
 */
async function testPerformance() {
    console.log('‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    const queries = [
        '–ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
        '–æ–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤',
        '–ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥',
        '—Å–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö',
        '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞'
    ];
    
    const startTime = Date.now();
    const results = [];
    
    for (const query of queries) {
        const queryStart = Date.now();
        try {
            const response = await fetch(`${BASE_URL}/api/transaction-clustering?action=find-similar`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    query,
                    matchThreshold: 0.7,
                    matchCount: 10,
                    includeClusters: false
                })
            });

            const data = await response.json();
            const queryTime = Date.now() - queryStart;
            
            if (response.ok) {
                results.push({
                    query,
                    time: queryTime,
                    transactions: data.summary.totalTransactions,
                    success: true
                });
            } else {
                results.push({
                    query,
                    time: queryTime,
                    error: data.error,
                    success: false
                });
            }
        } catch (error) {
            const queryTime = Date.now() - queryStart;
            results.push({
                query,
                time: queryTime,
                error: error.message,
                success: false
            });
        }
    }
    
    const totalTime = Date.now() - startTime;
    const avgTime = totalTime / queries.length;
    
    console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${avgTime.toFixed(2)}ms`);
    
    results.forEach(result => {
        if (result.success) {
            console.log(`   ‚úÖ "${result.query}": ${result.time}ms (${result.transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`);
        } else {
            console.log(`   ‚ùå "${result.query}": ${result.time}ms (–æ—à–∏–±–∫–∞: ${result.error})`);
        }
    });
    
    return { totalTime, avgTime, results };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
 */
async function checkSystemStatus() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã...');
    
    try {
        const response = await fetch(`${BASE_URL}/api/transaction-clustering?action=get&limit=1`);
        
        if (response.ok) {
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
            return true;
        } else {
            console.error('‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ:', error.message);
        return false;
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    const systemOk = await checkSystemStatus();
    if (!systemOk) {
        console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.');
        return;
    }
    
    console.log('---\n');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
    const clusteringResult = await testClustering();
    console.log('---\n');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    const clustersResult = await testClusters();
    console.log('---\n');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const similarResult = await testSimilarTransactions();
    console.log('---\n');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const performanceResult = await testPerformance();
    console.log('---\n');
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    console.log(`   –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: ${clusteringResult ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${clustersResult ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö: ${similarResult ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${performanceResult ? '‚úÖ' : '‚ùå'}`);
    
    if (clusteringResult && clustersResult && similarResult && performanceResult) {
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } else {
        console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(console.error);
}

module.exports = {
    testClustering,
    testClusters,
    testSimilarTransactions,
    testPerformance,
    checkSystemStatus
}; 