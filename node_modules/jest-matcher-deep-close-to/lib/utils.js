"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculatePrecision = exports.printCloseTo = exports.printResponse = void 0;
const jest_matcher_utils_1 = require("jest-matcher-utils");
function printResponse(error, received, expected, precision) {
    /* istanbul ignore next */
    if (error) {
        return {
            message: () => `${(0, jest_matcher_utils_1.matcherHint)('.toBeDeepCloseTo')}\n\n` +
                `${error.reason}: ${(0, jest_matcher_utils_1.printExpected)(error.expected)}\n` +
                `Received: ${(0, jest_matcher_utils_1.printReceived)(error.received)}\n\n` +
                printCloseTo(received, expected, precision, error),
            pass: false,
        };
    }
    else {
        return {
            message: () => `${(0, jest_matcher_utils_1.matcherHint)('.not.toBeDeepCloseTo')}\n\n` +
                'The two objects are deeply equal:\n' +
                `  ${(0, jest_matcher_utils_1.printExpected)(expected)}\n` +
                'Received:\n' +
                `  ${(0, jest_matcher_utils_1.printReceived)(received)}`,
            pass: true,
        };
    }
}
exports.printResponse = printResponse;
// from https://github.com/facebook/jest/blob/e0b33b74b5afd738edc183858b5c34053cfc26dd/packages/expect/src/print.ts#L66
function printCloseTo(received, expected, precision, error) {
    const { index, key, diff } = error;
    if (diff !== undefined) {
        const receivedDiff = diff;
        const expectedDiff = calculatePrecision(precision);
        const receivedDiffString = (0, jest_matcher_utils_1.stringify)(receivedDiff);
        const expectedDiffString = receivedDiffString.includes('e')
            ? // toExponential arg is number of digits after the decimal point.
                expectedDiff.toExponential(0)
            : precision >= 0 && precision < 20
                ? // toFixed arg is number of digits after the decimal point.
                    // It may be a value between 0 and 20 inclusive.
                    // Implementations may optionally support a larger range of values.
                    expectedDiff.toFixed(precision + 1)
                : (0, jest_matcher_utils_1.stringify)(expectedDiff);
        const keyString = key !== undefined ? `Key:                 ${key}\n` : '';
        const indexString = index !== undefined ? `Index:                 ${(0, jest_matcher_utils_1.stringify)(index)}\n` : '';
        return (indexString +
            keyString +
            `Expected precision:    ${(0, jest_matcher_utils_1.stringify)(precision)}\n` +
            `Expected difference: < ${(0, jest_matcher_utils_1.EXPECTED_COLOR)(expectedDiffString)}\n` +
            `Received difference:   ${(0, jest_matcher_utils_1.RECEIVED_COLOR)(receivedDiffString)}`);
    }
    else {
        const keyString = key !== undefined ? `Key: ${(0, jest_matcher_utils_1.BOLD_WEIGHT)(key)}\n` : '';
        const indexString = index !== undefined ? `Index: ${(0, jest_matcher_utils_1.BOLD_WEIGHT)((0, jest_matcher_utils_1.stringify)(index))}\n` : '';
        return (indexString +
            keyString +
            'Full diff: \n' +
            (0, jest_matcher_utils_1.printDiffOrStringify)(expected, received, 'Expected', 'Received', true));
    }
}
exports.printCloseTo = printCloseTo;
function calculatePrecision(precision) {
    return 0.5 * Math.pow(10, -precision);
}
exports.calculatePrecision = calculatePrecision;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkRBUzRCO0FBSTVCLFNBQWdCLGFBQWEsQ0FDM0IsS0FBb0IsRUFDcEIsUUFBa0IsRUFDbEIsUUFBa0IsRUFDbEIsU0FBaUI7SUFFakIsMEJBQTBCO0lBQzFCLElBQUksS0FBSyxFQUFFO1FBQ1QsT0FBTztZQUNMLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FDWixHQUFHLElBQUEsZ0NBQVcsRUFBQyxrQkFBa0IsQ0FBQyxNQUFNO2dCQUN4QyxHQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBQSxrQ0FBYSxFQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSTtnQkFDckQsYUFBYSxJQUFBLGtDQUFhLEVBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNO2dCQUNoRCxZQUFZLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDO1lBRXBELElBQUksRUFBRSxLQUFLO1NBQ1osQ0FBQztLQUNIO1NBQU07UUFDTCxPQUFPO1lBQ0wsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUNaLEdBQUcsSUFBQSxnQ0FBVyxFQUFDLHNCQUFzQixDQUFDLE1BQU07Z0JBQzVDLHFDQUFxQztnQkFDckMsS0FBSyxJQUFBLGtDQUFhLEVBQUMsUUFBUSxDQUFDLElBQUk7Z0JBQ2hDLGFBQWE7Z0JBQ2IsS0FBSyxJQUFBLGtDQUFhLEVBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxFQUFFLElBQUk7U0FDWCxDQUFDO0tBQ0g7QUFDSCxDQUFDO0FBNUJELHNDQTRCQztBQUVELHVIQUF1SDtBQUN2SCxTQUFnQixZQUFZLENBQzFCLFFBQWlCLEVBQ2pCLFFBQWlCLEVBQ2pCLFNBQWlCLEVBQ2pCLEtBQVk7SUFFWixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFFbkMsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1FBQ3RCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQztRQUMxQixNQUFNLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVuRCxNQUFNLGtCQUFrQixHQUFHLElBQUEsOEJBQVMsRUFBQyxZQUFZLENBQUMsQ0FBQztRQUNuRCxNQUFNLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFDekQsQ0FBQyxDQUFDLGlFQUFpRTtnQkFDakUsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDL0IsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksU0FBUyxHQUFHLEVBQUU7Z0JBQ2xDLENBQUMsQ0FBQywyREFBMkQ7b0JBQzNELGdEQUFnRDtvQkFDaEQsbUVBQW1FO29CQUNuRSxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7Z0JBQ3JDLENBQUMsQ0FBQyxJQUFBLDhCQUFTLEVBQUMsWUFBWSxDQUFDLENBQUM7UUFFNUIsTUFBTSxTQUFTLEdBQUcsR0FBRyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDM0UsTUFBTSxXQUFXLEdBQ2YsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsMEJBQTBCLElBQUEsOEJBQVMsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFNUUsT0FBTyxDQUNMLFdBQVc7WUFDWCxTQUFTO1lBQ1QsMEJBQTBCLElBQUEsOEJBQVMsRUFBQyxTQUFTLENBQUMsSUFBSTtZQUNsRCwwQkFBMEIsSUFBQSxtQ0FBYyxFQUFDLGtCQUFrQixDQUFDLElBQUk7WUFDaEUsMEJBQTBCLElBQUEsbUNBQWMsRUFBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQy9ELENBQUM7S0FDSDtTQUFNO1FBQ0wsTUFBTSxTQUFTLEdBQUcsR0FBRyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFBLGdDQUFXLEVBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3hFLE1BQU0sV0FBVyxHQUNmLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBQSxnQ0FBVyxFQUFDLElBQUEsOEJBQVMsRUFBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN6RSxPQUFPLENBQ0wsV0FBVztZQUNYLFNBQVM7WUFDVCxlQUFlO1lBQ2YsSUFBQSx5Q0FBb0IsRUFBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQ3ZFLENBQUM7S0FDSDtBQUNILENBQUM7QUE3Q0Qsb0NBNkNDO0FBRUQsU0FBZ0Isa0JBQWtCLENBQUMsU0FBaUI7SUFDbEQsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRkQsZ0RBRUMifQ==