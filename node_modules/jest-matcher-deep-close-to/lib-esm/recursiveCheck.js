import { calculatePrecision } from './utils';
function cmpNumber(received, expected, precision) {
    if (isNaN(received)) {
        return isNaN(expected) ? false : { reason: 'Expected', expected, received };
    }
    if (!isFinite(received)) {
        return received === expected
            ? false
            : { reason: 'Expected', expected, received };
    }
    if (Math.abs(received - expected) <= calculatePrecision(precision)) {
        return false;
    }
    return {
        reason: 'Expected',
        expected,
        received,
        diff: Math.abs(received - expected),
    };
}
function cmpEqual(received, expected) {
    if (received === expected)
        return false;
    return {
        reason: `The ${typeof expected}s do not match`,
        expected,
        received,
    };
}
function cmpArray(received, expected, precision, strict) {
    const receivedLength = received.length;
    const expectedLength = expected.length;
    if (receivedLength !== expectedLength) {
        return {
            reason: 'The arrays length does not match',
            expected: expectedLength,
            received: receivedLength,
        };
    }
    for (let i = 0; i < receivedLength; i++) {
        const error = recursiveCheck(received[i], expected[i], precision, strict);
        if (error) {
            return { ...error, index: i };
        }
    }
    return false;
}
function cmpObject(received, expected, precision, strict) {
    const sorter = (a, b) => a.localeCompare(b);
    const receivedKeys = Object.keys(received).sort(sorter);
    const expectedKeys = Object.keys(expected).sort(sorter);
    const sameLength = !strict || receivedKeys.length === expectedKeys.length;
    if (!sameLength ||
        expectedKeys.some((e) => !Object.prototype.hasOwnProperty.call(received, e))) {
        return {
            reason: 'The objects do not have similar keys',
            expected: expectedKeys,
            received: receivedKeys,
        };
    }
    for (const prop in expected) {
        const propError = recursiveCheck(received[prop], expected[prop], precision, strict);
        if (propError)
            return { ...propError, key: prop };
    }
    return false;
}
/**
 * @param {number|Array} received
 * @param {number|Array} expected
 * @param {number} precision
 * @param {boolean} strict equality or subsets allowed
 * @return {boolean|{reason, expected, received}}
 */
export function recursiveCheck(received, expected, precision, strict = true) {
    // Received and expected are numbers
    if (typeof received === 'number' && typeof expected === 'number') {
        return cmpNumber(received, expected, precision);
    }
    if ((typeof received === 'string' && typeof expected === 'string') ||
        (typeof received === 'boolean' && typeof expected === 'boolean')) {
        return cmpEqual(received, expected);
    }
    // Received and expected are arrays
    if (isArray(received) && isArray(expected)) {
        return cmpArray(received, expected, precision, strict);
    }
    /* Received and expected are either
     * 1) both explicitly set as undefined
     * 2) undefined properties of an object, where the received value may be implicitly undefined
     */
    if (expected === undefined && received === undefined)
        return false;
    // Received and expected are null
    if (expected === null && received === null)
        return false;
    // Received and expected are objects
    if (expected !== null &&
        typeof expected === 'object' &&
        !Array.isArray(received) &&
        received !== null &&
        typeof received === 'object' &&
        !Array.isArray(expected)) {
        return cmpObject(received, expected, precision, strict);
    }
    // Error for all other types
    return {
        reason: 'The current data type is not supported or they do not match',
        expected: typeof expected,
        received: typeof received,
    };
}
function isArray(value) {
    return (Array.isArray(value) ||
        value instanceof Float32Array ||
        value instanceof Float64Array);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdXJzaXZlQ2hlY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVjdXJzaXZlQ2hlY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBSTdDLFNBQVMsU0FBUyxDQUNoQixRQUFnQixFQUNoQixRQUFnQixFQUNoQixTQUFpQjtJQUVqQixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNuQixPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDO0tBQzdFO0lBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUN2QixPQUFPLFFBQVEsS0FBSyxRQUFRO1lBQzFCLENBQUMsQ0FBQyxLQUFLO1lBQ1AsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUM7S0FDaEQ7SUFFRCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQ2xFLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxPQUFPO1FBQ0wsTUFBTSxFQUFFLFVBQVU7UUFDbEIsUUFBUTtRQUNSLFFBQVE7UUFDUixJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0tBQ3BDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUksUUFBVyxFQUFFLFFBQVc7SUFDM0MsSUFBSSxRQUFRLEtBQUssUUFBUTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRXhDLE9BQU87UUFDTCxNQUFNLEVBQUUsT0FBTyxPQUFPLFFBQVEsZ0JBQWdCO1FBQzlDLFFBQVE7UUFDUixRQUFRO0tBQ1QsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FDZixRQUFtQixFQUNuQixRQUFtQixFQUNuQixTQUFpQixFQUNqQixNQUFlO0lBRWYsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUN2QyxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQ3ZDLElBQUksY0FBYyxLQUFLLGNBQWMsRUFBRTtRQUNyQyxPQUFPO1lBQ0wsTUFBTSxFQUFFLGtDQUFrQztZQUMxQyxRQUFRLEVBQUUsY0FBYztZQUN4QixRQUFRLEVBQUUsY0FBYztTQUN6QixDQUFDO0tBQ0g7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsY0FBYyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxRSxJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sRUFBRSxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDL0I7S0FDRjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUNoQixRQUFpQyxFQUNqQyxRQUFpQyxFQUNqQyxTQUFpQixFQUNqQixNQUFlO0lBRWYsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXhELE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBTSxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssWUFBWSxDQUFDLE1BQU0sQ0FBQztJQUUxRSxJQUNFLENBQUMsVUFBVTtRQUNYLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUM1RTtRQUNBLE9BQU87WUFDTCxNQUFNLEVBQUUsc0NBQXNDO1lBQzlDLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFFBQVEsRUFBRSxZQUFZO1NBQ3ZCLENBQUM7S0FDSDtJQUVELEtBQUssTUFBTSxJQUFJLElBQUksUUFBUSxFQUFFO1FBQzNCLE1BQU0sU0FBUyxHQUFHLGNBQWMsQ0FDN0IsUUFBMkIsQ0FBQyxJQUFJLENBQUMsRUFDakMsUUFBMkIsQ0FBQyxJQUFJLENBQUMsRUFDbEMsU0FBUyxFQUNULE1BQU0sQ0FDUCxDQUFDO1FBQ0YsSUFBSSxTQUFTO1lBQUUsT0FBTyxFQUFFLEdBQUcsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUNuRDtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQzVCLFFBQWlCLEVBQ2pCLFFBQWlCLEVBQ2pCLFNBQWlCLEVBQ2pCLE1BQU0sR0FBRyxJQUFJO0lBRWIsb0NBQW9DO0lBQ3BDLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUNoRSxPQUFPLFNBQVMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ2pEO0lBRUQsSUFDRSxDQUFDLE9BQU8sUUFBUSxLQUFLLFFBQVEsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLENBQUM7UUFDOUQsQ0FBQyxPQUFPLFFBQVEsS0FBSyxTQUFTLElBQUksT0FBTyxRQUFRLEtBQUssU0FBUyxDQUFDLEVBQ2hFO1FBQ0EsT0FBTyxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3JDO0lBRUQsbUNBQW1DO0lBQ25DLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUMxQyxPQUFPLFFBQVEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUN4RDtJQUVEOzs7T0FHRztJQUNILElBQUksUUFBUSxLQUFLLFNBQVMsSUFBSSxRQUFRLEtBQUssU0FBUztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRW5FLGlDQUFpQztJQUNqQyxJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksUUFBUSxLQUFLLElBQUk7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUV6RCxvQ0FBb0M7SUFDcEMsSUFDRSxRQUFRLEtBQUssSUFBSTtRQUNqQixPQUFPLFFBQVEsS0FBSyxRQUFRO1FBQzVCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDeEIsUUFBUSxLQUFLLElBQUk7UUFDakIsT0FBTyxRQUFRLEtBQUssUUFBUTtRQUM1QixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQ3hCO1FBQ0EsT0FBTyxTQUFTLENBQ2QsUUFBbUMsRUFDbkMsUUFBbUMsRUFDbkMsU0FBUyxFQUNULE1BQU0sQ0FDUCxDQUFDO0tBQ0g7SUFFRCw0QkFBNEI7SUFDNUIsT0FBTztRQUNMLE1BQU0sRUFBRSw2REFBNkQ7UUFDckUsUUFBUSxFQUFFLE9BQU8sUUFBUTtRQUN6QixRQUFRLEVBQUUsT0FBTyxRQUFRO0tBQzFCLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsS0FBYztJQUM3QixPQUFPLENBQ0wsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDcEIsS0FBSyxZQUFZLFlBQVk7UUFDN0IsS0FBSyxZQUFZLFlBQVksQ0FDOUIsQ0FBQztBQUNKLENBQUMifQ==