import { stringify, matcherHint, printExpected, printReceived, printDiffOrStringify, EXPECTED_COLOR, RECEIVED_COLOR, BOLD_WEIGHT, } from 'jest-matcher-utils';
export function printResponse(error, received, expected, precision) {
    /* istanbul ignore next */
    if (error) {
        return {
            message: () => `${matcherHint('.toBeDeepCloseTo')}\n\n` +
                `${error.reason}: ${printExpected(error.expected)}\n` +
                `Received: ${printReceived(error.received)}\n\n` +
                printCloseTo(received, expected, precision, error),
            pass: false,
        };
    }
    else {
        return {
            message: () => `${matcherHint('.not.toBeDeepCloseTo')}\n\n` +
                'The two objects are deeply equal:\n' +
                `  ${printExpected(expected)}\n` +
                'Received:\n' +
                `  ${printReceived(received)}`,
            pass: true,
        };
    }
}
// from https://github.com/facebook/jest/blob/e0b33b74b5afd738edc183858b5c34053cfc26dd/packages/expect/src/print.ts#L66
export function printCloseTo(received, expected, precision, error) {
    const { index, key, diff } = error;
    if (diff !== undefined) {
        const receivedDiff = diff;
        const expectedDiff = calculatePrecision(precision);
        const receivedDiffString = stringify(receivedDiff);
        const expectedDiffString = receivedDiffString.includes('e')
            ? // toExponential arg is number of digits after the decimal point.
                expectedDiff.toExponential(0)
            : precision >= 0 && precision < 20
                ? // toFixed arg is number of digits after the decimal point.
                    // It may be a value between 0 and 20 inclusive.
                    // Implementations may optionally support a larger range of values.
                    expectedDiff.toFixed(precision + 1)
                : stringify(expectedDiff);
        const keyString = key !== undefined ? `Key:                 ${key}\n` : '';
        const indexString = index !== undefined ? `Index:                 ${stringify(index)}\n` : '';
        return (indexString +
            keyString +
            `Expected precision:    ${stringify(precision)}\n` +
            `Expected difference: < ${EXPECTED_COLOR(expectedDiffString)}\n` +
            `Received difference:   ${RECEIVED_COLOR(receivedDiffString)}`);
    }
    else {
        const keyString = key !== undefined ? `Key: ${BOLD_WEIGHT(key)}\n` : '';
        const indexString = index !== undefined ? `Index: ${BOLD_WEIGHT(stringify(index))}\n` : '';
        return (indexString +
            keyString +
            'Full diff: \n' +
            printDiffOrStringify(expected, received, 'Expected', 'Received', true));
    }
}
export function calculatePrecision(precision) {
    return 0.5 * Math.pow(10, -precision);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsYUFBYSxFQUNiLGFBQWEsRUFDYixvQkFBb0IsRUFDcEIsY0FBYyxFQUNkLGNBQWMsRUFDZCxXQUFXLEdBQ1osTUFBTSxvQkFBb0IsQ0FBQztBQUk1QixNQUFNLFVBQVUsYUFBYSxDQUMzQixLQUFvQixFQUNwQixRQUFrQixFQUNsQixRQUFrQixFQUNsQixTQUFpQjtJQUVqQiwwQkFBMEI7SUFDMUIsSUFBSSxLQUFLLEVBQUU7UUFDVCxPQUFPO1lBQ0wsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUNaLEdBQUcsV0FBVyxDQUFDLGtCQUFrQixDQUFDLE1BQU07Z0JBQ3hDLEdBQUcsS0FBSyxDQUFDLE1BQU0sS0FBSyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJO2dCQUNyRCxhQUFhLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU07Z0JBQ2hELFlBQVksQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUM7WUFFcEQsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO0tBQ0g7U0FBTTtRQUNMLE9BQU87WUFDTCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1osR0FBRyxXQUFXLENBQUMsc0JBQXNCLENBQUMsTUFBTTtnQkFDNUMscUNBQXFDO2dCQUNyQyxLQUFLLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSTtnQkFDaEMsYUFBYTtnQkFDYixLQUFLLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNoQyxJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUM7S0FDSDtBQUNILENBQUM7QUFFRCx1SEFBdUg7QUFDdkgsTUFBTSxVQUFVLFlBQVksQ0FDMUIsUUFBaUIsRUFDakIsUUFBaUIsRUFDakIsU0FBaUIsRUFDakIsS0FBWTtJQUVaLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztJQUVuQyxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7UUFDdEIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQzFCLE1BQU0sWUFBWSxHQUFHLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRW5ELE1BQU0sa0JBQWtCLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ25ELE1BQU0sa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUN6RCxDQUFDLENBQUMsaUVBQWlFO2dCQUNqRSxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxTQUFTLEdBQUcsRUFBRTtnQkFDbEMsQ0FBQyxDQUFDLDJEQUEyRDtvQkFDM0QsZ0RBQWdEO29CQUNoRCxtRUFBbUU7b0JBQ25FLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztnQkFDckMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUU1QixNQUFNLFNBQVMsR0FBRyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMzRSxNQUFNLFdBQVcsR0FDZixLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQywwQkFBMEIsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUU1RSxPQUFPLENBQ0wsV0FBVztZQUNYLFNBQVM7WUFDVCwwQkFBMEIsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJO1lBQ2xELDBCQUEwQixjQUFjLENBQUMsa0JBQWtCLENBQUMsSUFBSTtZQUNoRSwwQkFBMEIsY0FBYyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FDL0QsQ0FBQztLQUNIO1NBQU07UUFDTCxNQUFNLFNBQVMsR0FBRyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDeEUsTUFBTSxXQUFXLEdBQ2YsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3pFLE9BQU8sQ0FDTCxXQUFXO1lBQ1gsU0FBUztZQUNULGVBQWU7WUFDZixvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQ3ZFLENBQUM7S0FDSDtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsU0FBaUI7SUFDbEQsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4QyxDQUFDIn0=