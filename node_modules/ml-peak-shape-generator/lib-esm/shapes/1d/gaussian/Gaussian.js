import { ROOT_2LN2, GAUSSIAN_EXP_FACTOR, ROOT_PI_OVER_LN2, } from '../../../util/constants';
import erfinv from '../../../util/erfinv';
export class Gaussian {
    constructor(options = {}) {
        const { fwhm = 500, sd } = options;
        this.fwhm = sd ? gaussianWidthToFWHM(2 * sd) : fwhm;
    }
    fwhmToWidth(fwhm = this.fwhm) {
        return gaussianFwhmToWidth(fwhm);
    }
    widthToFWHM(width) {
        return gaussianWidthToFWHM(width);
    }
    fct(x) {
        return gaussianFct(x, this.fwhm);
    }
    getArea(height = calculateGaussianHeight({ fwhm: this.fwhm })) {
        return getGaussianArea({ fwhm: this.fwhm, height });
    }
    getFactor(area) {
        return getGaussianFactor(area);
    }
    getData(options = {}) {
        return getGaussianData(this, options);
    }
    calculateHeight(area = 1) {
        return calculateGaussianHeight({ fwhm: this.fwhm, area });
    }
    getParameters() {
        return ['fwhm'];
    }
}
export function calculateGaussianHeight(options) {
    let { fwhm = 500, area = 1, sd } = options;
    if (sd)
        fwhm = gaussianWidthToFWHM(2 * sd);
    return (2 * area) / ROOT_PI_OVER_LN2 / fwhm;
}
/**
 * Calculate the height of the gaussian function of a specific width (fwhm) at a speicifc
 * x position (the gaussian is centered on x=0)
 * @param x
 * @param fwhm
 * @returns y
 */
export function gaussianFct(x, fwhm) {
    return Math.exp(GAUSSIAN_EXP_FACTOR * Math.pow(x / fwhm, 2));
}
export function gaussianWidthToFWHM(width) {
    return width * ROOT_2LN2;
}
export function gaussianFwhmToWidth(fwhm) {
    return fwhm / ROOT_2LN2;
}
export function getGaussianArea(options) {
    let { fwhm = 500, sd, height = 1 } = options;
    if (sd)
        fwhm = gaussianWidthToFWHM(2 * sd);
    return (height * ROOT_PI_OVER_LN2 * fwhm) / 2;
}
export function getGaussianFactor(area = 0.9999) {
    return Math.sqrt(2) * erfinv(area);
}
export function getGaussianData(shape = {}, options = {}) {
    let { fwhm = 500, sd } = shape;
    if (sd)
        fwhm = gaussianWidthToFWHM(2 * sd);
    let { length, factor = getGaussianFactor(), height = calculateGaussianHeight({ fwhm }), } = options;
    if (!length) {
        length = Math.min(Math.ceil(fwhm * factor), Math.pow(2, 25) - 1);
        if (length % 2 === 0)
            length++;
    }
    const center = (length - 1) / 2;
    const data = new Float64Array(length);
    for (let i = 0; i <= center; i++) {
        data[i] = gaussianFct(i - center, fwhm) * height;
        data[length - 1 - i] = data[i];
    }
    return data;
}
//# sourceMappingURL=Gaussian.js.map