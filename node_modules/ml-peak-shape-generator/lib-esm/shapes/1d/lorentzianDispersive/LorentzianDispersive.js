import { calculateLorentzianHeight, getLorentzianFactor, lorentzianFwhmToWidth, lorentzianWidthToFWHM, } from '../lorentzian/Lorentzian';
export class LorentzianDispersive {
    constructor(options = {}) {
        const { fwhm = 500 } = options;
        this.fwhm = fwhm;
    }
    fwhmToWidth(fwhm = this.fwhm) {
        return lorentzianFwhmToWidth(fwhm);
    }
    widthToFWHM(width) {
        return lorentzianWidthToFWHM(width);
    }
    fct(x) {
        return lorentzianDispersiveFct(x, this.fwhm);
    }
    //eslint-disable-next-line
    getArea(_height) {
        return 0;
    }
    getFactor(area) {
        return getLorentzianFactor(area);
    }
    getData(options = {}) {
        return getLorentzianDispersiveData(this, options);
    }
    calculateHeight(area = 1) {
        return calculateLorentzianHeight({ fwhm: this.fwhm, area });
    }
    getParameters() {
        return ['fwhm'];
    }
}
export const lorentzianDispersiveFct = (x, fwhm) => {
    return (2 * fwhm * x) / (4 * x ** 2 + fwhm ** 2);
};
export const getLorentzianDispersiveData = (shape = {}, options = {}) => {
    let { fwhm = 500 } = shape;
    let { length, factor = getLorentzianFactor(), height = calculateLorentzianHeight({ fwhm, area: 1 }), } = options;
    if (!length) {
        length = Math.min(Math.ceil(fwhm * factor), Math.pow(2, 25) - 1);
        if (length % 2 === 0)
            length++;
    }
    const center = (length - 1) / 2;
    const data = new Float64Array(length);
    for (let i = 0; i <= center; i++) {
        data[i] = lorentzianDispersiveFct(i - center, fwhm) * height;
        data[length - 1 - i] = -data[i];
    }
    return data;
};
//# sourceMappingURL=LorentzianDispersive.js.map