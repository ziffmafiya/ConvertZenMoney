import { ROOT_THREE } from '../../../util/constants';
export class Lorentzian {
    constructor(options = {}) {
        const { fwhm = 500 } = options;
        this.fwhm = fwhm;
    }
    fwhmToWidth(fwhm = this.fwhm) {
        return lorentzianFwhmToWidth(fwhm);
    }
    widthToFWHM(width) {
        return lorentzianWidthToFWHM(width);
    }
    fct(x) {
        return lorentzianFct(x, this.fwhm);
    }
    getArea(height = 1) {
        return getLorentzianArea({ fwhm: this.fwhm, height });
    }
    getFactor(area) {
        return getLorentzianFactor(area);
    }
    getData(options = {}) {
        return getLorentzianData(this, options);
    }
    calculateHeight(area = 1) {
        return calculateLorentzianHeight({ fwhm: this.fwhm, area });
    }
    getParameters() {
        return ['fwhm'];
    }
}
export const calculateLorentzianHeight = ({ fwhm = 1, area = 1 }) => {
    return (2 * area) / Math.PI / fwhm;
};
export const getLorentzianArea = (options) => {
    const { fwhm = 500, height = 1 } = options;
    return (height * Math.PI * fwhm) / 2;
};
export const lorentzianFct = (x, fwhm) => {
    return fwhm ** 2 / (4 * x ** 2 + fwhm ** 2);
};
export const lorentzianWidthToFWHM = (width) => {
    return width * ROOT_THREE;
};
export const lorentzianFwhmToWidth = (fwhm) => {
    return fwhm / ROOT_THREE;
};
export const getLorentzianFactor = (area = 0.9999) => {
    if (area >= 1) {
        throw new Error('area should be (0 - 1)');
    }
    const halfResidual = (1 - area) * 0.5;
    const quantileFunction = (p) => Math.tan(Math.PI * (p - 0.5));
    return ((quantileFunction(1 - halfResidual) - quantileFunction(halfResidual)) / 2);
};
export const getLorentzianData = (shape = {}, options = {}) => {
    let { fwhm = 500 } = shape;
    let { length, factor = getLorentzianFactor(), height = calculateLorentzianHeight({ fwhm, area: 1 }), } = options;
    if (!length) {
        length = Math.min(Math.ceil(fwhm * factor), Math.pow(2, 25) - 1);
        if (length % 2 === 0)
            length++;
    }
    const center = (length - 1) / 2;
    const data = new Float64Array(length);
    for (let i = 0; i <= center; i++) {
        data[i] = lorentzianFct(i - center, fwhm) * height;
        data[length - 1 - i] = data[i];
    }
    return data;
};
//# sourceMappingURL=Lorentzian.js.map