import type { GetData1DOptions } from '../GetData1DOptions';
import type { Parameter, Shape1DClass } from '../Shape1DClass';
export interface GeneralizedLorentzianClassOptions {
    /**
     * Full width at half maximum.
     * @default 500
     */
    fwhm?: number;
    /**
     * kurtosis parameter of the shape, between -1 to 2
     * @default 1
     */
    gamma?: number;
}
interface GetGeneralizedLorentzianAreaOptions {
    /**
     * The maximum intensity value of the shape
     * @default 1
     */
    height?: number;
    /**
     * Full width at half maximum.
     * @default 500
     */
    fwhm?: number;
    gamma?: number;
    x?: number;
}
/**
 * This shape is a linear combination of rational function (n|n+2), for n = 0 (lorentzian function) and n = 2
 * the parameter that combines those two functions is `gamma` and it is called the kurtosis parameter, it is an
 * implementation of generalized lorentzian shape published by Stanislav Sykora in the SMASH 2010. DOI:10.3247/SL3nmr10.006
 * @link http://www.ebyte.it/stan/Talk_ML_UserMeeting_SMASH_2010_GeneralizedLorentzian.html
 */
export declare class GeneralizedLorentzian implements Shape1DClass {
    /**
     * Full width at half maximum.
     * @default 500
     */
    fwhm: number;
    /**
     * kurtosis parameter of the shape, between -1 to 2
     * @default 1
     */
    gamma: number;
    constructor(options?: GeneralizedLorentzianClassOptions);
    fwhmToWidth(fwhm?: number): number;
    widthToFWHM(width: number): number;
    fct(x: number): number;
    getArea(height?: number): number;
    getFactor(area?: number): number;
    getData(options?: GetData1DOptions): Float64Array;
    calculateHeight(area?: number): number;
    getParameters(): Parameter[];
}
export declare const calculateGeneralizedLorentzianHeight: ({ fwhm, gamma, area, }: {
    fwhm?: number | undefined;
    gamma?: number | undefined;
    area?: number | undefined;
}) => number;
/**
 * expression of integral generated by Mathematica of the function
 */
export declare const getGeneralizedLorentzianArea: (options: GetGeneralizedLorentzianAreaOptions) => number;
export declare const generalizedLorentzianFct: (x: number, fwhm: number, gamma: number) => number;
export declare const generalizedLorentzianWidthToFWHM: (width: number) => number;
export declare const generalizedLorentzianFwhmToWidth: (fwhm: number) => number;
export declare const getGeneralizedLorentzianFactor: (area?: number) => number;
export type GetGeneralizedLorentzianData = GetData1DOptions & {
    gamma?: number;
};
export declare const getGeneralizedLorentzianData: (shape?: GeneralizedLorentzianClassOptions, options?: GetGeneralizedLorentzianData) => Float64Array;
export {};
