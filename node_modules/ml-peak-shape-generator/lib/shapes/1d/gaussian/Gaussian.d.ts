import type { GetData1DOptions } from '../GetData1DOptions';
import type { Shape1DClass } from '../Shape1DClass';
import { Parameter } from '../Shape1DClass';
interface CalculateGaussianHeightOptions {
    /**
     * @default 500
     */
    fwhm?: number;
    /**
     * @default 1
     */
    area?: number;
    sd?: number;
}
export interface GaussianClassOptions {
    /**
     * Full width at half maximum.
     * @default 500
     */
    fwhm?: number;
    /**
     * The halft width between the inflection points or standard deviation.
     * If it is defined the fwhm would be re-assigned.
     */
    sd?: number;
}
interface GetGaussianAreaOptions {
    /**
     * The maximum intensity value of the shape.
     * @default 1
     */
    height?: number;
    /**
     * Full width at half maximum.
     * @default 500
     */
    fwhm?: number;
    /**
     * The half width between the inflection points or standard deviation.
     * If it is defined the fwhm would be re-assigned.
     */
    sd?: number;
}
export declare class Gaussian implements Shape1DClass {
    /**
     * Full width at half maximum.
     * @default 500
     */
    fwhm: number;
    constructor(options?: GaussianClassOptions);
    fwhmToWidth(fwhm?: number): number;
    widthToFWHM(width: number): number;
    fct(x: number): number;
    getArea(height?: number): number;
    getFactor(area?: number): number;
    getData(options?: GetData1DOptions): Float64Array;
    calculateHeight(area?: number): number;
    getParameters(): Parameter[];
}
export declare function calculateGaussianHeight(options: CalculateGaussianHeightOptions): number;
/**
 * Calculate the height of the gaussian function of a specific width (fwhm) at a speicifc
 * x position (the gaussian is centered on x=0)
 * @param x
 * @param fwhm
 * @returns y
 */
export declare function gaussianFct(x: number, fwhm: number): number;
export declare function gaussianWidthToFWHM(width: number): number;
export declare function gaussianFwhmToWidth(fwhm: number): number;
export declare function getGaussianArea(options: GetGaussianAreaOptions): number;
export declare function getGaussianFactor(area?: number): number;
export declare function getGaussianData(shape?: GaussianClassOptions, options?: GetData1DOptions): Float64Array;
export {};
