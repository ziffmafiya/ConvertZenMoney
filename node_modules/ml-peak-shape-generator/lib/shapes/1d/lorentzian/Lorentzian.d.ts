import type { GetData1DOptions } from '../GetData1DOptions';
import type { Parameter, Shape1DClass } from '../Shape1DClass';
export interface LorentzianClassOptions {
    /**
     * Full width at half maximum.
     * @default 500
     */
    fwhm?: number;
}
export interface GetLorentzianAreaOptions {
    /**
     * The maximum intensity value of the shape
     * @default 1
     */
    height?: number;
    /**
     * Full width at half maximum.
     * @default 500
     */
    fwhm?: number;
}
export declare class Lorentzian implements Shape1DClass {
    /**
     * Full width at half maximum.
     * @default 500
     */
    fwhm: number;
    constructor(options?: LorentzianClassOptions);
    fwhmToWidth(fwhm?: number): number;
    widthToFWHM(width: number): number;
    fct(x: number): number;
    getArea(height?: number): number;
    getFactor(area?: number): number;
    getData(options?: GetData1DOptions): Float64Array;
    calculateHeight(area?: number): number;
    getParameters(): Parameter[];
}
export declare const calculateLorentzianHeight: ({ fwhm, area }: {
    fwhm?: number | undefined;
    area?: number | undefined;
}) => number;
export declare const getLorentzianArea: (options: GetLorentzianAreaOptions) => number;
export declare const lorentzianFct: (x: number, fwhm: number) => number;
export declare const lorentzianWidthToFWHM: (width: number) => number;
export declare const lorentzianFwhmToWidth: (fwhm: number) => number;
export declare const getLorentzianFactor: (area?: number) => number;
export declare const getLorentzianData: (shape?: LorentzianClassOptions, options?: GetData1DOptions) => Float64Array;
