import type { GetData2DOptions } from '../GetData2DOptions';
import { Shape2DClass } from '../Shape2DClass';
export interface XYNumber {
    x: number;
    y: number;
}
interface CalculateGaussian2DHeightOptions {
    sd?: number | XYNumber;
    /**
     * @default 50
     */
    fwhm?: number | XYNumber;
    /**
     * @default 1
     */
    volume?: number;
}
export interface Gaussian2DClassOptions {
    /**
     * Full width at half maximum.
     * Could specify the value for each axis by a xy object or both by a number.
     * @default 50
     */
    fwhm?: number | XYNumber;
    /**
     * The halft width between the inflection points or standard deviation.
     * If it is defined the fwhm would be re-assigned.
     */
    sd?: number | XYNumber;
}
/**
 * Calculate the Volume of gaussian shape.
 * @returns The volume of the specific shape and parameters.
 */
export interface GetGaussian2DVolumeOptions {
    /**
     * The maximum intensity value of the shape
     * @default 1
     */
    height?: number;
    /**
     * Full width at half maximum.
     * Could specify the value for each axis by a xy object or both by a number.
     * @default 50
     */
    fwhm?: number | XYNumber;
    /**
     * The halft width between the inflection points or standard deviation.
     * If it is defined the fwhm would be re-assigned.
     */
    sd?: number | XYNumber;
}
export declare class Gaussian2D implements Shape2DClass {
    fwhmX: number;
    fwhmY: number;
    constructor(options?: Gaussian2DClassOptions);
    fct(x: number, y: number): number;
    getData(options?: GetData2DOptions): any[];
    getFactor(volume?: number): number;
    getVolume(height?: number): number;
    widthToFWHM(width: number): number;
    fwhmToWidth(fwhm: number): number;
    calculateHeight(volume?: number): number;
    set fwhm(fwhm: number | XYNumber);
}
export declare const gaussian2DFct: (x: number, y: number, xFWHM: number, yFWHM: number) => number;
export declare const getGaussian2DData: (shape: Gaussian2DClassOptions, options?: GetData2DOptions) => any[];
export declare const calculateGaussian2DHeight: (options?: CalculateGaussian2DHeightOptions) => number;
export declare const getGaussian2DVolume: (options?: GetGaussian2DVolumeOptions) => number;
export {};
