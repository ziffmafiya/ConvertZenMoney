"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRocCurve = void 0;
const getBinaryClassifiers_1 = require("./getBinaryClassifiers");
const getClasses_1 = require("./utilities/getClasses");
const getClassesPairs_1 = require("./utilities/getClassesPairs");
const getSelectedResults_1 = require("./utilities/getSelectedResults");
/**
 * Returns a ROC (Receiver Operating Characteristic) curve for a given response and prediction vectors.
 * @param responses Array containing category metadata.
 * @param predictions Array containing the results of regression.
 * @return sensitivities and specificities as a object.
 */
function getRocCurve(responses, predictions) {
    const classes = (0, getClasses_1.getClasses)(responses);
    const pairsOfClasses = (0, getClassesPairs_1.getClassesPairs)(classes);
    const curves = [];
    for (const pairs of pairsOfClasses) {
        const tests = (0, getSelectedResults_1.getSelectedResults)(predictions, pairs);
        const targets = (0, getSelectedResults_1.getSelectedResults)(responses, pairs);
        const { truePositives, falsePositives, trueNegatives, falseNegatives } = (0, getBinaryClassifiers_1.getBinaryClassifiers)(targets, tests);
        const curve = { sensitivities: [], specificities: [] };
        for (let i = 0; i < truePositives.length; i++) {
            curve.sensitivities.push(truePositives[i] / (truePositives[i] + falseNegatives[i]));
            curve.specificities.push(trueNegatives[i] / (falsePositives[i] + trueNegatives[i]));
        }
        curves.push(curve);
    }
    return curves;
}
exports.getRocCurve = getRocCurve;
//# sourceMappingURL=getRocCurve.js.map