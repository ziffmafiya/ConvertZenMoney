import { BaseRegression } from 'ml-regression-base';
export type NumberArray = number[] | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array;
interface PolynomialRegressionOptions {
    interceptAtZero?: boolean;
}
export declare class PolynomialRegression extends BaseRegression {
    degree: number;
    powers: number[];
    coefficients: number[];
    /**
     * @param x - independent or explanatory variable
     * @param y - dependent or response variable
     * @param degree - degree of the polynomial regression, or array of powers to be used. When degree is an array, intercept at zero is forced to false/ignored.
     * @example `new PolynomialRegression(x, y, 2)`, in this case, you can pass the option `interceptAtZero`, if you need it.
     * @param options
     * @example `new PolynomialRegression(x, y, [1, 3, 5])`
     * Each of the degrees corresponds to a column, so if you have them switched, just do:
     * @example `new PolynomialRegression(x, y, [3, 1, 5])`
     * @param options.interceptAtZero - force the polynomial regression so that f(0) = 0
     */
    constructor(x: NumberArray, y: NumberArray, degree: number | NumberArray, options?: PolynomialRegressionOptions);
    _predict(x: number): number;
    toJSON(): {
        name: string;
        degree: number;
        powers: number[];
        coefficients: number[];
    };
    toString(precision: number): string;
    toLaTeX(precision: number): string;
    _toFormula(precision: number, isLaTeX: boolean): string;
    static load(json: ReturnType<PolynomialRegression['toJSON']>): PolynomialRegression;
}
export {};
//# sourceMappingURL=index.d.ts.map