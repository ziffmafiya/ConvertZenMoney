"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeMatrices = exports.featureNormalize = exports.pow2array = exports.norm = void 0;
const ml_matrix_1 = require("ml-matrix");
/**
 * @private
 * Function that given vector, returns its norm
 * @param {Vector} X
 * @return {number} Norm of the vector
 */
function norm(X) {
    return Math.sqrt(X.clone().apply(pow2array).sum());
}
exports.norm = norm;
/**
 * @private
 * Function that pow 2 each element of a Matrix or a Vector,
 * used in the apply method of the Matrix object
 * @param {number} i - index i.
 * @param {number} j - index j.
 * @return {Matrix} The Matrix object modified at the index i, j.
 * */
function pow2array(i, j) {
    this.set(i, j, this.get(i, j) ** 2);
}
exports.pow2array = pow2array;
/**
 * @private
 * Function that normalize the dataset and return the means and
 * standard deviation of each feature.
 * @param {Matrix} dataset
 * @return {object} dataset normalized, means and standard deviations
 */
function featureNormalize(dataset) {
    let means = dataset.mean('column');
    let std = dataset.standardDeviation('column', {
        mean: means,
        unbiased: true,
    });
    let result = ml_matrix_1.Matrix.checkMatrix(dataset).subRowVector(means);
    return { result: result.divRowVector(std), means, std };
}
exports.featureNormalize = featureNormalize;
/**
 * @private
 * Function that initialize an array of matrices.
 * @param {Array} array
 * @param {boolean} isMatrix
 * @return {Array} array with the matrices initialized.
 */
function initializeMatrices(array, isMatrix) {
    if (isMatrix) {
        for (let i = 0; i < array.length; ++i) {
            for (let j = 0; j < array[i].length; ++j) {
                let elem = array[i][j];
                array[i][j] = elem !== null ? new ml_matrix_1.Matrix(array[i][j]) : undefined;
            }
        }
    }
    else {
        for (let i = 0; i < array.length; ++i) {
            array[i] = new ml_matrix_1.Matrix(array[i]);
        }
    }
    return array;
}
exports.initializeMatrices = initializeMatrices;
//# sourceMappingURL=utils.js.map