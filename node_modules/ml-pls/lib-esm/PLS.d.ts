/**
 * @class PLS
 */
export class PLS {
    /**
     * Load a PLS model from a JSON Object
     * @param {object} model
     * @return {PLS} - PLS object from the given model
     */
    static load(model: object): PLS;
    /**
     * Constructor for Partial Least Squares (PLS)
     * @param {object} options
     * @param {number} [options.latentVectors] - Number of latent vector to get (if the algorithm doesn't find a good model below the tolerance)
     * @param {number} [options.tolerance=1e-5]
     * @param {boolean} [options.scale=true] - rescale dataset using mean.
     * @param {object} model - for load purposes.
     */
    constructor(options: {
        latentVectors?: number | undefined;
        tolerance?: number | undefined;
        scale?: boolean | undefined;
    }, model: object);
    meanX: any;
    stdDevX: any;
    meanY: any;
    stdDevY: any;
    PBQ: Matrix | undefined;
    R2X: any;
    scale: any;
    scaleMethod: any;
    tolerance: any;
    latentVectors: number | undefined;
    /**
     * Fits the model with the given data and predictions, in this function is calculated the
     * following outputs:
     *
     * T - Score matrix of X
     * P - Loading matrix of X
     * U - Score matrix of Y
     * Q - Loading matrix of Y
     * B - Matrix of regression coefficient
     * W - Weight matrix of X
     *
     * @param {Matrix|Array} trainingSet
     * @param {Matrix|Array} trainingValues
     */
    train(trainingSet: Matrix | any[], trainingValues: Matrix | any[]): void;
    ssqYcal: number | undefined;
    E: Matrix | undefined;
    F: Matrix | undefined;
    T: Matrix | undefined;
    P: Matrix | undefined;
    U: Matrix | undefined;
    Q: Matrix | undefined;
    W: Matrix | undefined;
    B: Matrix | undefined;
    /**
     * Predicts the behavior of the given dataset.
     * @param {Matrix|Array} dataset - data to be predicted.
     * @return {Matrix} - predictions of each element of the dataset.
     */
    predict(dataset: Matrix | any[]): Matrix;
    /**
     * Returns the explained variance on training of the PLS model
     * @return {number}
     */
    getExplainedVariance(): number;
    /**
     * Export the current model to JSON.
     * @return {object} - Current model.
     */
    toJSON(): object;
}
import { Matrix } from 'ml-matrix';
//# sourceMappingURL=PLS.d.ts.map