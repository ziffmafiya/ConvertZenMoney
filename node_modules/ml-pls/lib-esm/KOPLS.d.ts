/**
 * @class KOPLS
 */
export class KOPLS {
    /**
     * Load a K-OPLS with the given model.
     * @param {object} model
     * @param {Kernel} kernel - kernel used on the model, see [ml-kernel](https://github.com/mljs/kernel).
     * @return {KOPLS}
     */
    static load(model: object, kernel: Kernel): KOPLS;
    /**
     * Constructor for Kernel-based Orthogonal Projections to Latent Structures (K-OPLS)
     * @param {object} options
     * @param {number} [options.predictiveComponents] - Number of predictive components to use.
     * @param {number} [options.orthogonalComponents] - Number of Y-Orthogonal components.
     * @param {Kernel} [options.kernel] - Kernel object to apply, see [ml-kernel](https://github.com/mljs/kernel).
     * @param {object} model - for load purposes.
     */
    constructor(options: {
        predictiveComponents?: number | undefined;
        orthogonalComponents?: number | undefined;
        kernel?: any;
    }, model: object);
    trainingSet: Matrix | undefined;
    YLoadingMat: Matrix | undefined;
    SigmaPow: Matrix | undefined;
    YScoreMat: Matrix | undefined;
    predScoreMat: any[] | undefined;
    YOrthLoadingVec: any[] | undefined;
    YOrthEigen: any;
    YOrthScoreMat: any[] | undefined;
    toNorm: any[] | undefined;
    TURegressionCoeff: any[] | undefined;
    kernelX: any[] | undefined;
    kernel: any;
    orthogonalComp: any;
    predictiveComp: any;
    /**
     * Train the K-OPLS model with the given training set and labels.
     * @param {Matrix|Array} trainingSet
     * @param {Matrix|Array} trainingValues
     */
    train(trainingSet: Matrix | any[], trainingValues: Matrix | any[]): void;
    /**
     * Predicts the output given the matrix to predict.
     * @param {Matrix|Array} toPredict
     * @return {{y: Matrix, predScoreMat: Array<Matrix>, predYOrthVectors: Array<Matrix>}} predictions
     */
    predict(toPredict: Matrix | any[]): {
        y: Matrix;
        predScoreMat: Array<Matrix>;
        predYOrthVectors: Array<Matrix>;
    };
    /**
     * Export the current model to JSON.
     * @return {object} - Current model.
     */
    toJSON(): object;
}
import { Matrix } from 'ml-matrix';
//# sourceMappingURL=KOPLS.d.ts.map