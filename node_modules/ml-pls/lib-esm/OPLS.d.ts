/**
 * Creates new OPLS (orthogonal partial latent structures) from features and labels.
 * @param {Array} data - matrix containing data (X).
 * @param {Array} labels - 1D Array containing metadata (Y).
 * @param {Object} [options={}]
 * @param {boolean} [options.center = true] - should the data be centered (subtract the mean).
 * @param {boolean} [options.scale = true] - should the data be scaled (divide by the standard deviation).
 * @param {Array} [options.cvFolds = []] - Allows to provide folds as array of objects with the arrays trainIndex and testIndex as properties.
 * @param {number} [options.nbFolds = 7] - Allows to generate the defined number of folds with the training and test set choosen randomly from the data set.
 * */
export class OPLS {
    /**
     * Load an OPLS model from JSON
     * @param {Object} model
     * @return {OPLS}
     */
    static load(model: Object): OPLS;
    constructor(data: any, labels: any, options?: {});
    labels: any;
    center: any;
    scale: any;
    means: any;
    meansY: any;
    stdevs: any;
    stdevsY: any;
    model: any;
    predictiveScoresCV: any;
    orthogonalScoresCV: any;
    yHatScoresCV: any;
    mode: any;
    output: any;
    /**
     * get access to all the computed elements
     * Mainly for debug and testing
     * @return {Object} output object
     */
    getLogs(): Object;
    getScores(): {
        scoresX: any;
        scoresY: any;
    };
    /**
     * Export the current model to a JSON object
     * @return {Object} model
     */
    toJSON(): Object;
    /**
     * Predict scores for new data
     * @param {Matrix} features - a matrix containing new data
     * @param {Object} [options={}]
     * @param {Array} [options.trueLabel] - an array with true values to compute confusion matrix
     * @param {Number} [options.nc] - the number of components to be used
     * @return {Object} - predictions
     */
    predictCategory(features: Matrix, options?: {
        trueLabel?: any[] | undefined;
        nc?: number | undefined;
    } | undefined): Object;
    /**
     * Predict scores for new data
     * @param {Matrix} features - a matrix containing new data
     * @param {Object} [options={}]
     * @param {Array} [options.trueLabel] - an array with true values to compute confusion matrix
     * @param {Number} [options.nc] - the number of components to be used
     * @return {Object} - predictions
     */
    predict(features: Matrix, options?: {
        trueLabel?: any[] | undefined;
        nc?: number | undefined;
    } | undefined): Object;
    _predictAll(data: any, categories: any, options?: {}): {
        R2y: number;
        R2x: number;
        xRes: any;
        orthogonalScores: any;
        orthogonalLoadings: any;
        orthogonalWeights: any;
        predictiveComponents: Matrix;
        totalPred: Matrix;
        XOrth: any;
        oplsC: Object;
        plsC: NIPALS;
    };
    tssy: number | undefined;
    tssx: number | undefined;
    /**
     *
     * @param {*} X - dataset matrix object
     * @param {*} group - labels matrix object
     * @param {*} index - train and test index (output from getFold())
     */
    _getTrainTest(X: any, group: any, index: any): {
        trainFeatures: Matrix;
        testFeatures: Matrix;
        trainLabels: Matrix;
        testLabels: Matrix;
    };
}
import { Matrix } from 'ml-matrix';
import { NIPALS } from 'ml-matrix';
//# sourceMappingURL=OPLS.d.ts.map