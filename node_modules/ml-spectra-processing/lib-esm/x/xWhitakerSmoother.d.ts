import type { NumberArray } from 'cheminfo-types';
import type { CalculateAdaptiveWeightsOptions } from '../utils/calculateAdaptiveWeights';
interface XWhitakerSmootherOptions extends CalculateAdaptiveWeightsOptions {
    /**
     * Factor of weights matrix in -> [I + lambda D'D]z = x
     * @default 100
     */
    lambda?: number;
    /**
     * Maximum number of iterations for the baseline refinement process.
     * @default 100
     */
    maxIterations?: number;
    /**
     * Tolerance for convergence. The process stops if the change in baseline is less than this value.
     * @default 1e-6
     */
    tolerance?: number;
    /**
     * Learning rate for weight updates.
     * @default 0.5
     */
    learningRate?: number;
    /**
     * Minimum weight value to avoid division by zero or extremely small weights.
     * @default 0.01
     */
    minWeight?: number;
}
/**
 * Computes the baseline points for the given data using an iterative smoothing algorithm.
 * @param yData - The input data array.
 * @param options - The options for baseline computation.
 * @returns - The computed baseline points.
 */
export declare function xWhitakerSmoother(yData: NumberArray, options?: XWhitakerSmootherOptions): number[] | Float64Array<ArrayBuffer> | Int8Array<ArrayBuffer> | Uint8Array<ArrayBuffer> | Uint8ClampedArray<ArrayBuffer> | Int16Array<ArrayBuffer> | Uint16Array<ArrayBuffer> | Int32Array<ArrayBuffer> | Uint32Array<ArrayBuffer> | Float32Array<ArrayBuffer>;
export {};
//# sourceMappingURL=xWhitakerSmoother.d.ts.map