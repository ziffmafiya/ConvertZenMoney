export function getRescaler(options = {}) {
    const { targetMin = 0, targetMax = 1, clamp = true, algorithmOptions = {}, algorithm = 'linear', } = options;
    let { originalMin = 0, originalMax = 1 } = options;
    const convert = getDataConverter(algorithm, algorithmOptions);
    originalMin = convert(originalMin);
    originalMax = convert(originalMax);
    const originalRange = originalMax - originalMin;
    const targetRange = targetMax - targetMin;
    return function rescaler(value) {
        value = convert(value);
        value = checkRange(value, originalMin, originalMax, clamp);
        const valueScaled = (value - originalMin) / originalRange;
        return targetMin + valueScaled * targetRange;
    };
}
function getDataConverter(kind = 'linear', options = {}) {
    return (value) => {
        switch (kind) {
            case 'linear':
                return value;
            case 'logarithmic':
                return Math.log10(value);
            case 'power':
                return value ** (options.power || 2);
            default:
                throw new Error(`Unknown kind ${String(kind)}`);
        }
    };
}
function checkRange(value, min, max, clamp = true) {
    if (value < min) {
        if (clamp)
            return min;
        throw new RangeError(`Value ${value} is out of range [${min}, ${max}]`);
    }
    if (value > max) {
        if (clamp)
            return max;
        throw new RangeError(`Value ${value} is out of range [${min}, ${max}]`);
    }
    return value;
}
//# sourceMappingURL=getRescaler.js.map