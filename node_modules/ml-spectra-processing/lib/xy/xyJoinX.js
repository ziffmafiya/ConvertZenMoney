"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xyJoinX = xyJoinX;
const xyCheck_1 = require("./xyCheck");
/**
 * Join x / y values when difference in X is closer than delta.
 * When joining, y values are summed and x values are weighted average
 * @param data - Object that contains property x (an ordered increasing array) and y (an array)
 * @param options - Options
 * @returns - An object with the xyIntegration function
 */
function xyJoinX(data, options = {}) {
    (0, xyCheck_1.xyCheck)(data);
    const { delta = 1 } = options;
    const deltaIsFunction = typeof delta === 'function';
    const x = Array.from(data.x);
    const y = Array.from(data.y);
    if (x.length < 2) {
        return { x, y };
    }
    let position = 0;
    for (let i = 1; i < x.length; i++) {
        const difference = x[i] - x[i - 1];
        const currentDelta = deltaIsFunction ? delta((x[i] + x[i - 1]) / 2) : delta;
        if (difference <= currentDelta) {
            // we join
            if (y[position] !== 0 || y[i] !== 0) {
                x[position] =
                    (x[position] * y[position] + x[i] * y[i]) / (y[position] + y[i]);
                y[position] += y[i];
            }
        }
        else {
            position++;
            x[position] = x[i];
            y[position] = y[i];
        }
    }
    x.length = position + 1;
    y.length = position + 1;
    return { x, y };
}
//# sourceMappingURL=xyJoinX.js.map