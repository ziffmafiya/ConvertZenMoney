"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xRobustDistributionStats = xRobustDistributionStats;
const xBoxPlotWithOutliers_1 = require("./xBoxPlotWithOutliers");
const xMean_1 = require("./xMean");
const xStandardDeviation_1 = require("./xStandardDeviation");
/**
 * Calculate distribution statistics of an array without providing options. Statistics
 * like sd and mean are calculated after removing outliers.
 * This ensure that the statistics are calculated in the same way in all the packages
 * If the array is empty it will throw an error
 * If the array has a length of 1, sd will be NaN (unbiased calculation of sd)
 * @param array - data
 * @param options
 * @returns - q1, median, q3, min, max
 */
function xRobustDistributionStats(array) {
    const boxPlot = (0, xBoxPlotWithOutliers_1.xBoxPlotWithOutliers)(array);
    let filteredArray;
    if (boxPlot.outliers.length === 0) {
        filteredArray = array;
    }
    else {
        filteredArray = new Float64Array(array.length - boxPlot.outliers.length);
        let j = 0;
        for (const element of array) {
            if (element >= boxPlot.min && element <= boxPlot.max) {
                filteredArray[j++] = element;
            }
        }
    }
    return {
        ...boxPlot,
        mean: (0, xMean_1.xMean)(filteredArray),
        sd: (0, xStandardDeviation_1.xStandardDeviation)(filteredArray),
        nb: filteredArray.length,
    };
}
//# sourceMappingURL=xRobustDistributionStats.js.map