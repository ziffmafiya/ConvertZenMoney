import type { DataXY, FromTo, NumberArray } from 'cheminfo-types';
export interface XNoiseSanPlotOptions {
    /**
     * array to filter data, if the i-th element is different to zero then the i-th element of the distribution will be ignored.
     * @default undefined
     */
    mask?: NumberArray;
    /**
     * percent of positive signal distribution where the noise level will be determined, if it is not defined the program calculate it.
     * @default: will be calculated from the data.
     */
    cutOff?: number;
    /**
     * true the noise level will be recalculated get out the signals using factorStd.
     * @default true
     */
    refine?: boolean;
    /**
     * If true the returns values will be calculated from the Rayleigh inverse cumulative distribution.
     * it returns
     * @default false
     */
    magnitudeMode?: boolean;
    /**
     * factor to scale the data input[i]*=scaleFactor.
     * @default 1
     */
    scaleFactor?: number;
    /**
     * factor times std to determine what will be marked as signals.
     * @default 5
     */
    factorStd?: number;
    /**
     * If the baseline is correct, the midpoint of distribution should be zero. if true, the distribution will be centered.
     * @default true
     */
    fixOffset?: boolean;
    /**
     * log scale to apply in the intensity axis in order to avoid big numbers.
     * @default 2
     */
    logBaseY?: number;
    considerList?: {
        from: number;
        step: number;
        to: number;
    };
    fromTo?: Record<string, FromTo>;
}
export interface XNoiseSanPlotResult {
    positive: number;
    negative: number;
    snr: number;
    sanplot: Record<string, DataXY>;
}
/**
 * Determine noise level by san plot methodology (https://doi.org/10.1002/mrc.4882)
 * @param array - real or magnitude spectra data.
 * @param options - options
 * @returns noise level
 */
export declare function xNoiseSanPlot(array: NumberArray, options?: XNoiseSanPlotOptions): XNoiseSanPlotResult;
//# sourceMappingURL=xNoiseSanPlot.d.ts.map