"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const sortCollectionSet_1 = require("../sortCollectionSet");
(0, vitest_1.describe)('sortCollectionSet test', () => {
    (0, vitest_1.it)('collection of 1 set', () => {
        const result = (0, sortCollectionSet_1.sortCollectionSet)([[1, 2, 3]]);
        (0, vitest_1.expect)(result).toStrictEqual({
            values: [[1, 2, 3]],
            indices: [[0]],
        });
    });
    (0, vitest_1.it)('collection of 4 set', () => {
        const result = (0, sortCollectionSet_1.sortCollectionSet)([
            [1, 2, 3],
            [2, 4, 5],
            [1, 6, 8, 10],
            [1, 2, 3],
        ]);
        (0, vitest_1.expect)(result).toStrictEqual({
            values: [
                [1, 2, 3],
                [2, 4, 5],
                [1, 6, 8, 10],
            ],
            indices: [[0, 3], [1], [2]],
        });
    });
    (0, vitest_1.it)('collection of 10 set', () => {
        const result = (0, sortCollectionSet_1.sortCollectionSet)([
            [1, 2],
            [2, 4, 5],
            [1, 6, 8, 10],
            [1, 2, 3],
            [],
            [],
            [],
            [120],
            [1, 2, 3, 4, 5, 56, 8, 90],
        ]);
        (0, vitest_1.expect)(result).toStrictEqual({
            values: [
                [],
                [1, 2],
                [1, 2, 3],
                [2, 4, 5],
                [1, 6, 8, 10],
                [1, 2, 3, 4, 5, 56, 8, 90],
                [120],
            ],
            indices: [[4, 5, 6], [0], [3], [1], [2], [8], [7]],
        });
    });
    (0, vitest_1.it)('collection of 1 empty set', () => {
        const result = (0, sortCollectionSet_1.sortCollectionSet)([[]]);
        (0, vitest_1.expect)(result).toStrictEqual({
            values: [[]],
            indices: [[0]],
        });
    });
});
//# sourceMappingURL=sortCollectionSet.test.js.map