!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("kd-tree-javascript")):"function"==typeof define&&define.amd?define(["exports","kd-tree-javascript"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).hdbscan={},t.kdTreeJS)}(this,function(t,r){"use strict";class v{constructor(t,e,s,n){this.parent=t,this.child=e,this.lambda=s,this.size=n}}class l{constructor(t){this.parent=new Array(2*(t-1)).fill(-1),this.nextLabel=t,this.size=new Array(t).fill(1).concat(new Array(t-1).fill(0))}union(t,e){this.size[this.nextLabel]=this.size[t]+this.size[e],this.parent[t]=this.nextLabel,this.parent[e]=this.nextLabel,this.size[this.nextLabel]=this.size[t]+this.size[e],this.nextLabel+=1}fastFind(t){for(var e=t;-1!=this.parent[t];)t=this.parent[t];for(;this.parent[e]!=t;)e=this.parent[e],this.parent[e]=t;return t}sizeOf(t){return this.size[t]}}class b{constructor(t){this.data=new Array(t);for(var e=0;e<t;e++)this.data[e]=[e,0];this.isComponent=new Array(t).fill(!0)}union(t,e){t=this.find(t),e=this.find(e);this.data[t][1]<this.data[e][1]?this.data[t][0]=e:this.data[t][1]>this.data[e][1]?this.data[e][0]=t:(this.data[e][0]=t,this.data[t][1]+=1)}find(t){return this.data[t][0]!==t&&(this.data[t][0]=this.find(this.data[t][0]),this.isComponent[t]=!1),this.data[t][0]}components(){return[...Array(this.isComponent.length).keys()].filter(t=>this.isComponent[t])}}function M(e,t){var s=e.length;const n=2*s-s+1;var r=[t];let o=[];for(;r.length;)o=o.concat(r),(r=r.filter(t=>t>=n).map(t=>t-n)).length&&(r=r.map(t=>[e[t].parent,e[t].child]).flat());return o}function o(t,e,s="eom",n=!1,r=0,o=0){if("eom"!==s)throw Error("Only eom method is supported now.");if(0!==r)throw Error("epsilon selection is not supported now.");if(n)throw Error("singleCluster is not supported now.");r=n?[...e.keys()].sort((t,e)=>e-t):[...e.keys()].sort((t,e)=>e-t).slice(0,e.size-1);const i=t.filter(t=>1<t.size),a=new Map;r.forEach(t=>a.set(t,!0));n=t.filter(t=>1===t.size).map(t=>t.child),n=Math.max(...n)+1,t=Math.max(...t.map(t=>t.lambda));o<=0&&(o=n+1);const l=new Map;i.forEach(t=>l.set(t.child,t.size)),console.log("getClusters: ",a,n,t,l),console.log("nodeList: ",r),console.log("clusterTree: ",i);for(const u of r){const m=i.filter(t=>t.parent===u).map(t=>t.child);console.log("childSelection: ",u,m);var h=m.map(t=>e.get(t)||0).reduce((t,e)=>t+e,0);if(console.log("subtreeStability: ",u,h,e.get(u),l.get(u),o),h>(e.get(u)||0)||(l.get(u)||0)>o)a.set(u,!1),e.set(u,h);else for(const g of function(t,e){var s=[e];let n=[];for(;s.length;)n=n.concat(s),s=t.filter(t=>-1!==s.indexOf(t.parent)).map(t=>t.child);return n}(i,u))g!==u&&a.set(g,!1)}console.log("isCluster: ",a,e);var c=[...a.entries()].filter(t=>t[1]).map(t=>t[0]).sort();const f=new Map,d=new Map;for(var p=0;p<c.length;p++)f.set(c[p],p),d.set(p,c[p]);return{clusterNodes:c,clusterNodesMap:f,revClusterNodesMap:d}}function i(t,e=!1){var s=t;return e||(s=t.sort((t,e)=>t.lambda-e.lambda),console.log("sortedMst: ",s)),function(t){const e=new Array(t.length);for(var s=new l(t.length+1),n=0;n<t.length;++n){var r=t[n].parent,o=t[n].child,i=t[n].lambda,a=s.fastFind(r),r=s.fastFind(o),o=s.sizeOf(a)+s.sizeOf(r);e[n]=new v(a,r,i,o),s.union(a,r)}return e}(s)}function a(t,e,s,n){e=function(t,e,s){const n=new r.kdTree(t,s,[]);return t.map(t=>n.nearest(t,e)[0][1])}(t,e,n);console.log("coreDistances: ",e);e=function(t,e,s,n){var r=t.length;const o=[],i=[],a=new Array(r).fill(1/0);for(var l,h=0,c=1/0,f=1/0,d=1/0,p=1;p<r;p++){o[h]=1;for(var u,m=n[h],f=1/0,c=0,g=0;g<r;g++)o[g]||(l=a[g],d=s(t[h],t[g]),1!=e&&(d/=e),u=n[g],l<m||l<u||l<d?l<f&&(f=l,c=g):(m<u?d<u&&(d=u):d<m&&(d=m),d<l?(a[g]=d)<f&&(f=d,c=g):l<f&&(f=l,c=g)));i[p-1]=new v(h,c,f,0),h=c}return i}(t,s,n,e);console.log("primMst: ",e);e=i(e);return console.log("singleLinkage: ",e),e}function h(t,e){for(var s=0,n=0;n<t.length;n++)s+=Math.pow(t[n]-e[n],2);return Math.sqrt(s)}t.Hdbscan=class{constructor(t,e=5,s=5,n=1,r=h){this.input=t,this.minClusterSize=e,this.minSamples=s,this.alpha=n,this.metric=r;e=function(t,e){var s=2*t.length,n=Math.floor(s/2)+1,r=n+1,o=new Array(1+s).fill(0);o[s]=n;var i=[],s=M(t,s);console.log("bfs: ",s.length,s);const a=new Array(s.length).fill(!1);for(const p of s)if(!(a[p]||p<n)){var l=t[p-n],h=l.parent,c=l.child,f=0<l.lambda?1/l.lambda:1/0,d=n<=h?t[h-n].size:1,l=n<=c?t[c-n].size:1;if(e<=d&&e<=l)o[h]=r,r+=1,i.push(new v(o[p],o[h],f,d)),o[c]=r,r+=1,i.push(new v(o[p],o[c],f,l));else if(d<e&&l<e){for(const u of M(t,h))u<n&&i.push(new v(o[p],u,f,1)),a[u]=!0;for(const m of M(t,c))m<n&&i.push(new v(o[p],m,f,1)),a[m]=!0}else if(d<e){o[c]=o[p];for(const g of M(t,h))g<n&&i.push(new v(o[p],g,f,1)),a[g]=!0}else{o[h]=o[p];for(const w of M(t,c))w<n&&i.push(new v(o[p],w,f,1)),a[w]=!0}}return i}(a(this.input,this.minSamples,this.alpha,this.metric),this.minClusterSize);console.log("condensedTree: ",e);s=function(t){var e=Math.max(...t.map(t=>t.child)),s=Math.min(...t.map(t=>t.parent)),n=Math.max(...t.map(t=>t.parent))-s+1;e<s&&(e=s);const r=t.map(t=>[t.child,t.lambda]).sort((t,e)=>t[0]-e[0]),o=new Array(e+1).fill(NaN);for(var i=r.map(t=>t[0]),a=r.map(t=>t[1]),l=t.map(t=>t.parent),h=t.map(t=>t.size),c=t.map(t=>t.lambda),f=-1,d=0,p=0;p<r.length;p++)var u=i[p],m=a[p],d=u==f?Math.min(d,m):(f=(-1!=f&&(o[f]=d),u),m);-1!=f&&(o[f]=d),o[s]=0;const g=new Array(n).fill(0);for(var w=0;w<t.length;w++){var v=l[w],b=c[w],M=h[w];g[v-s]+=(b-o[v])*M}for(var y=new Map,w=0;w<g.length;w++)y.set(s+w,g[w]);return y}(e);console.log("stabilityDict: ",s);var{clusterNodes:n,clusterNodesMap:r,revClusterNodesMap:s}=o(e,s);console.log("clusterNodes: ",n,"clusterNodesMap: ",r,"revClusterNodesMap: ",s);n=function(t,e,s,n=!1,r=0,o=!1){if(0!==r)throw Error("epsilon selection is not supported now.");if(n)throw Error("singleCluster is not supported now.");if(o)throw Error("matchReferenceImplementation is not supported now.");var i=t.map(t=>t.parent),a=t.map(t=>t.child),l=Math.min(...i);const h=new Array(l);var c=Math.max(...i);const f=new b(c+1);console.log("rootCluster: ",l);for(var d=0;d<t.length;d++){var p=a[d],u=i[d];-1===e.indexOf(p)&&f.union(u,p)}console.log("unionFind: ",f.components());for(var m,g,d=0;d<l;d++){const w=f.find(d);w<l?h[d]=-1:w===l?1===e.length&&n?(g=t.find(t=>t.child===d),0!==r?g&&g.lambda>=1/r?h[d]=s.get(w):h[d]=-1:(m=t.filter(t=>t.child===w).map(t=>t.lambda),g&&m&&g.lambda>=Math.max(...m)?h[d]=s.get(w):h[d]=-1)):h[d]=-1:o?(m=(g=t.find(t=>t.child===d))&&g.lambda,g=(g=t.find(t=>t.child===w))&&g.lambda,h[d]=m&&g&&g<m?s.get(w):-1):h[d]=s.get(w)}return h}(e,n,r);console.log("labeledInputs: ",n);var{clusters:r,noise:n}=function(t){const e=[],s=[];for(var n=0;n<t.length;n++){var r=t[n];-1===r?s.push(n):(e[r]||(e[r]=[]),e[r].push(n))}return{clusters:e,noise:s}}(n);console.log({clusters:r,noise:n}),this.clusters=r,this.noise=n}getClusters(){return this.clusters}getNoise(){return this.noise}},t.euclidean=h,Object.defineProperty(t,"__esModule",{value:!0})});
