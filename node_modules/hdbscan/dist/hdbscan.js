"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hdbscan = void 0;
const clusterTree_1 = require("./clusterTree");
const kdTreePrim_1 = __importDefault(require("./kdTreePrim"));
const metrics_1 = require("./metrics");
class Hdbscan {
    constructor(input, minClusterSize = 5, minSamples = 5, alpha = 1.0, metric = metrics_1.euclidean) {
        this.input = input;
        this.minClusterSize = minClusterSize;
        this.minSamples = minSamples;
        this.alpha = alpha;
        this.metric = metric;
        // Build the cluster hierarchy using kdTree and Prim
        const singleLinkage = (0, kdTreePrim_1.default)(this.input, this.minSamples, this.alpha, this.metric);
        // Condense the cluster tree
        const condensedTree = (0, clusterTree_1.condenseTree)(singleLinkage, this.minClusterSize);
        console.log('condensedTree: ', condensedTree);
        // Compute stabilities of condensed clusters
        const stabilityDict = (0, clusterTree_1.computeStabilities)(condensedTree);
        console.log('stabilityDict: ', stabilityDict);
        // Extract the clusters
        const { clusterNodes, clusterNodesMap, revClusterNodesMap } = (0, clusterTree_1.getClusterNodes)(condensedTree, stabilityDict);
        console.log('clusterNodes: ', clusterNodes, 'clusterNodesMap: ', clusterNodesMap, 'revClusterNodesMap: ', revClusterNodesMap);
        // Label the inputs
        const labeledInputs = (0, clusterTree_1.labelClusters)(condensedTree, clusterNodes, clusterNodesMap);
        console.log('labeledInputs: ', labeledInputs);
        // Get array of clusters and noise from labels
        const { clusters, noise } = (0, clusterTree_1.getClustersAndNoise)(labeledInputs);
        console.log({ clusters, noise });
        this.clusters = clusters;
        this.noise = noise;
    }
    getClusters() {
        return this.clusters;
    }
    getNoise() {
        return this.noise;
    }
}
exports.Hdbscan = Hdbscan;
