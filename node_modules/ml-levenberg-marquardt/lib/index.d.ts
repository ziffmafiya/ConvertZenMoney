/**
 * Curve fitting algorithm
 * @param {{x:ArrayLike<number>, y:ArrayLike<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]
 * @param {function} parameterizedFunction - Takes an array of parameters and returns a function with the independent variable as its sole argument
 * @param {object} options - Options object
 * @param {ArrayLike<number>} options.initialValues - Array of initial parameter values
 * @param {number|ArrayLike<number>} [options.weights = 1] - weighting vector, if the length does not match with the number of data points, the vector is reconstructed with first value.
 * @param {number} [options.damping = 1e-2] - Levenberg-Marquardt parameter, small values of the damping parameter λ result in a Gauss-Newton update and large
values of λ result in a gradient descent update
 * @param {number} [options.dampingStepDown = 9] - factor to reduce the damping (Levenberg-Marquardt parameter) when there is not an improvement when updating parameters.
 * @param {number} [options.dampingStepUp = 11] - factor to increase the damping (Levenberg-Marquardt parameter) when there is an improvement when updating parameters.
 * @param {number} [options.improvementThreshold = 1e-3] - the threshold to define an improvement through an update of parameters
 * @param {number|ArrayLike<number>} [options.gradientDifference = 10e-2] - The step size to approximate the jacobian matrix
 * @param {boolean} [options.centralDifference = false] - If true the jacobian matrix is approximated by central differences otherwise by forward differences
 * @param {ArrayLike<number>} [options.minValues] - Minimum allowed values for parameters
 * @param {ArrayLike<number>} [options.maxValues] - Maximum allowed values for parameters
 * @param {number} [options.maxIterations = 100] - Maximum of allowed iterations
 * @param {number} [options.errorTolerance = 10e-3] - Minimum uncertainty allowed for each point.
 * @param {number} [options.timeout] - maximum time running before throw in seconds.
 * @return {{parameterValues: Array<number>, parameterError: number, iterations: number}}
 */
export function levenbergMarquardt(data: {
    x: ArrayLike<number>;
    y: ArrayLike<number>;
}, parameterizedFunction: Function, options: {
    initialValues: ArrayLike<number>;
    weights?: number | ArrayLike<number> | undefined;
    damping?: number | undefined;
    dampingStepDown?: number | undefined;
    dampingStepUp?: number | undefined;
    improvementThreshold?: number | undefined;
    gradientDifference?: number | ArrayLike<number> | undefined;
    centralDifference?: boolean | undefined;
    minValues?: ArrayLike<number> | undefined;
    maxValues?: ArrayLike<number> | undefined;
    maxIterations?: number | undefined;
    errorTolerance?: number | undefined;
    timeout?: number | undefined;
}): {
    parameterValues: Array<number>;
    parameterError: number;
    iterations: number;
};
//# sourceMappingURL=index.d.ts.map